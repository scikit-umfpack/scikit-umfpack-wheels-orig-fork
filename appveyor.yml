  # As config was originally based on an example by Olivier Grisel. Thanks!
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
clone_depth: 50

branches:
  only:
    - master

# No reason for us to restrict the number concurrent jobs
max_jobs: 100

cache:
  - '%LOCALAPPDATA%\pip\Cache'

environment:
  global:
      NPY_NUM_BUILD_JOBS: 4
      APPVEYOR_SAVE_CACHE_ON_ERROR: true
      APPVEYOR_SKIP_FINALIZE_ON_EXIT: true
      CONTAINER: wheels
      WHEELHOUSE_UPLOADER_USERNAME: travis-worker
      WHEELHOUSE_UPLOADER_SECRET:
        secure:
            9/K6DI3wjJQrG8sl1m159cdwWpqQZhqPhxIny3V++8UUPVKBU6uKu+D9D47Y1f1+
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64

  matrix:
    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
      NUMPY_BUILD_DEP: numpy==1.12.1

    - PYTHON: C:\Python35-x64
      PYTHON_VERSION: 3.5
      PYTHON_ARCH: 64
      NUMPY_BUILD_DEP: numpy==1.10.4

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"
  - "ECHO \"%APPVEYOR_SCHEDULED_BUILD%\""

install:
  # Get needed submodules
  - git submodule update --init --recursive
  
  - call %CONDA_INSTALL_LOCN%\Scripts\activate.bat
  - conda config --add channels conda-forge --force
  - conda install --yes --quiet swig suitesparse

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - >-
     python -c "import sys,platform,struct;
     print(sys.platform, platform.machine(), struct.calcsize('P') * 8, )"

  # Upgrade to the latest pip and setuptools.
  - python -m pip install -U pip setuptools wheel
  
  # Upgrade numpy to the version used for testing
  - pip install cython wheel numpy

build_script:
  - cd scikit-umfpack
  
  - git apply ../pr_52.patch
  
  # Copy over additional DLLs to bundle to the wheels
  #
  # The find commands below are mainly to find the paths where the libraries are.
  - C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 14.0" -type f -name 'msvcp*.dll'
  - C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 10.0" -type f -name 'msvcp*.dll'
  - C:\cygwin\bin\find "C:\Program Files (x86)\Microsoft Visual Studio 9.0" -type f -name 'msvcp*.dll'
  # * Python 3.6
  - mkdir build\lib.win32-3.6\scikits\umfpack
  - mkdir build\lib.win-amd64-3.6\scikits\umfpack
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win32-3.6\scikits\umfpack\"
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win-amd64-3.6\scikits\umfpack\"
  # * Python 3.5
  - mkdir build\lib.win32-3.5\scikits\umfpack
  - mkdir build\lib.win-amd64-3.5\scikits\umfpack
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x86\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win32-3.5\scikits\umfpack\"
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll" "build\lib.win-amd64-3.5\scikits\umfpack\"
  # * Python 3.4
  #   Didn't find the redist libs on appveyor for MSVC 10.0; hopefully few people use this old Python.
  # * Python 2.7
  - mkdir build\lib.win32-2.7\scikits\umfpack
  - mkdir build\lib.win-amd64-2.7\scikits\umfpack
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\redist\x86\Microsoft.VC90.CRT"\*.* "build\lib.win32-2.7\scikits\umfpack\"
  - copy "C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\redist\amd64\Microsoft.VC90.CRT"\*.* "build\lib.win-amd64-2.7\scikits\umfpack\"

  # Copy the vcpkg libraries
  - ps: cp "$env:CONDA_INSTALL_LOCN\Library\bin\*.dll" build\lib.win-amd64-3.5\scikits\umfpack
  - ps: cp "$env:CONDA_INSTALL_LOCN\Library\bin\*.dll" build\lib.win-amd64-3.6\scikits\umfpack

  # Build wheel using setup.py
  - python setup.py bdist_wheel
  - ps: |
      # Upload artifact to Appveyor immediately after build
      ls dist -r | Foreach-Object {
          appveyor PushArtifact $_.FullName
          pip install --pre $_.FullName
      }

before_test:
  # Install test requirements.
  - python -m pip install pytest pytest-xdist pytest-faulthandler pytest-env mpmath nose

test_script:
  - pytest

after_test:
  # Upload test results to Appveyor
  - ps: |
      If (Test-Path .\junit-results.xml) {
        (new-object net.webclient).UploadFile(
          "https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)",
          (Resolve-Path .\junit-results.xml)
        )
      }
      $LastExitCode = 0

  # Remove old or huge cache files to hopefully not exceed the 1GB cache limit.
  #
  # If the cache limit is reached, the cache will not be updated (of not even
  # created in the first run). So this is a trade of between keeping the cache
  # current and having a cache at all.
  # NB: This is done only `on_success` since the cache in uploaded only on
  # success anyway.
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -mtime +360 -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -type f -size +10M -delete
  - C:\cygwin\bin\find "%LOCALAPPDATA%\pip" -empty -delete
  # Show size of cache
  - C:\cygwin\bin\du -hs "%LOCALAPPDATA%\pip\Cache"

on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - pip install wheelhouse-uploader
  - python -m wheelhouse_uploader upload
    --no-ssl-check --local-folder=dist
    %UPLOAD_ARGS%
    %CONTAINER%
